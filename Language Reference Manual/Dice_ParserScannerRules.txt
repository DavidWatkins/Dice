< optional >
{ required } 

==Expressions

=Parenthesis
( {expression} )



=Literals

Integers:
['0'-'9']+

Floats:
['0'-'9']+ ['.'] ['0'-'9']+

Booleans:
true | false

def ascii:
([' '-'!' '#'-'[' ']'-'~'])
def escape characters:
'\\' ['\\' ''' '"' 'n' 'r' 't']

String Literals:
"(ascii | escape)*"

Identifiers/ID (Variable/Class/Field names):
['a'-'z' 'A'-'Z'] ( ['a'-'z' 'A'-'Z'] | ['0'-'9'] | '_' )*

Char Literal:
'(['0'-'9']| ascii)'

Other Literals:
null | this 





=Arrays

Array Primitives:
These can be a series of expressions bounded by bars and comma separated or a single expression.

| {expression},<expression>,â€¦ | 
or
{expression}

Array Create:
new {int|float|char|bool|void|class ID} [{expression}]+

Array Access:
{expression} [{expression}]+




=Binary Operators

{expression} {binary operator} {expression}

binary operators:
'+' | '-' | '*' | '/' | '%' | '==' | '!=' | '<' | '<=' | '>' | '>=' | 'and' | 'or'




=Unary Operators

{unary operator} {expression}

unary operators:
'not' | '-'


=Objects

Object Create:
new ID ( <expression> ,<expression>* )

Object Access:
{expression}.{expression}


=Assignments

{expression} = {expression}









==Statements

=Declarations

def datatype: int|float|char|bool|void|class ID


{ datatype | datatype([])+ } ID ;

or 

{ datatype | datatype([])+ } ID = {expression} ; 


=Conditionals

if without else:
if({expression}) {statements}

if/else:
if({expression}) {statements} else {statements}

if/else if/ else:
if({expression}) {statements} else if {statements} else {statements}

=Loops

for loop:
for(<expression>;<expression>;<expression>) {statements}

while loop:
while({expression}) {statements}

=Standalone Expression
{expression};

=Flow Control

Return:

return;
or
return {expression};

Break:
break;

Continue:
continue;


=Brace-enclosed Statements
{ <statements> } 


==Classes

=Class body

A class body consists of three parts: constructors, fields, and functions. Fields and functions must contain a scope (public or private); constructors are not inherited 

=Constructors

constructor ( <datatype ID> ,<datatype ID>* ) {statements}

=Functions

Function call:
{this| class ID}.ID(<expression> ,<expression>*)

Function declaration:

{public | private} {datatype} {ID} ( <datatype ID> ,<datatype ID>* )


STILL NEED TO FINISH 



