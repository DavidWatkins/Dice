class ComputerPlayer extends Player {

    private class Board board;
    private int myType;
    
    constructor(){
        this.board = new Board();
        class Board board = this.board;
        board.initializeBoard();
        myType = 2;
    }
    
    public class LocationObj placeTile(bool retry) {
        class Board board = this.board;
        if(myType == 2){
            myType = 1; 
        }
        
        
        class LocationObj move = getBestMove(myType);
        board.setPlayerMove(move, myType);
        return move;
    }

    public void setResult(class LocationObj move) {
        class Board board = this.board;
        if(myType == 2 and 
                (((move.getHorizontal() == 3 or move.getHorizontal() == 4) == false) and
                        (move.getVertical() == 3 or move.getVertical() == 4))){
            myType = 0; 
        }
        
        int opponent;
        if(myType == 1)
            opponent = 0;
        else
            opponent = 1;
        
        board.setPlayerMove(move, opponent);
    }
    
    private int[] createPointArray(){
        int[] points = new int[64];
        int i;
        int j;
        for(i = 0; i < 8; i = i + 1)
        {
           for(j = 0; j < 8; j = j + 1)
           {
               points[j*8+i] = 1;
           }
        }
(*        
        //[4*8+2*8+3*8+2*8+2*8+3*8+2*8+4]
        //[2*8+3*8+1*8+1*8+1*8+1*8+3*8+2]
        //[3*8+1*8+2*8+1*8+1*8+2*8+1*8+3]
        //[2*8+1*8+1*8+0*8+0*8+1*8+1*8+2]
        //[2*8+1*8+1*8+0*8+0*8+1*8+1*8+2]
        //[3*8+1*8+2*8+1*8+1*8+2*8+1*8+3]
        //[2*8+3*8+1*8+1*8+1*8+1*8+3*8+2]
        //[4*8+2*8+3*8+2*8+2*8+3*8+2*8+4]
*)        
        points[(0*8)+0] = points[(7*8)+0] = points[(0*8)+7] = points[(7*8)+7] = 4;
        
        points[2] = points[2*8] = points[2*8+7] = points[7*8+2] = 3;
        points[1*8+1] = points[6*8+6] = points[1*8+6] = points[6*8+1] = 3;
        points[5] = points[5*8+0] = points[5*8+7] = points[7*8+5] = 3;
           
        points[0*8+1] = points[0*8+3] = points[0*8+4] = points[0*8+6] = 2;
        points[1*8+0] = points[0*8+7] = 2;
        points[2*8+2] = points[2*8+5] = 2;
        points[3*8+0] = points[3*8+7] = 2;
        points[4*8+0] = points[4*8+7] = 2;
        points[5*8+2] = points[5*8+5] = 2;
        points[6*8+0] = points[6*8+7] = 2;
        points[7*8+1] = points[7*8+3] = points[7*8+4] = points[7*8+6] = 2;
        
        points[4*8+4] = points[4*8+5] = points[5*8+4] = points[5*8+5] = 0;  
        
        return points;
    }
       
    private class LocationObj getBestMove(int turn){
        class LocationObj best = null;
        int currentValue = -2147483647;
        int[] pointArray = createPointArray();
        class Board board = this.board;
        int i;
        int j;
        for(i = 0; i < 8; i = i + 1) {
            for(j = 0; j < 8; j = j + 1){
                class LocationObj l = new LocationObj(i,j);
                if(board.isValid(l, turn) and pointArray[i*8+j] > currentValue){
                    currentValue = pointArray[i*8+j];
                    best = l;
                }
            }
        }
        return best;
    }
}
