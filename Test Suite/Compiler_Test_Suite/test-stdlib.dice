
class String {

   private char[] my_string; 
   private int length;

   constructor(char[] input) {

       this.my_string = this.copy(input);         
       
       this.length = this.length();
   }

   (* PRIVATE CLASSES -----------------------------------------   *)

    
   private int length(char[] input) {
        int length = 0;

        for ( ; input[length] != 0; length = length + 1) {
            null;
        }

        return length;
    }

   private char[] copy(char[] input) {

        char[] newString = new char[this.length(input) + 1];

        int i = 0;

        for ( i = 0; input[i] != '\000'; i = i + 1) {

            newString[i] = input[i];
        }
        newString[i] = '\000';
        return newString;
   }

   (* PUBLIC CLASSES -----------------------------------------   *)
   public char getChar(int index) {

        return this.my_string[index];
   }

   public char[] string() {
        return this.my_string;
    }


   public int length() {
       
       int length = 0;
       
       for (;this.my_string[length] != 0; length = length + 1) {
            null;
       }

       return length;
   }

   public class String copy(class String input) {

        char[] newArray = this.copy(input.string());
        class String newString = new String(newArray);
        return newString;
    }
    
  public int indexOf(char x) {

        int i = 0;
        for (; this.getChar(i) != x and this.getChar(i) != 0; i = i + 1) {
            null;
            }

        (* If the char was not found, return -1 *)
        if (i == this.length()) {
            return -1;
        }   

        return i;
    }
(*
    public int indexOf(char[] x) {

        
        int i = 0;
        for (; this.
*)

   public class String concat(class String temp) {

        char[] temparray = new char[this.length() + temp.length() + 1];
        
        (* Copy over the current string into a new char array *)
        int i = 0;
        for (; this.getChar(i) != 0; i = i + 1) {
            temparray[i] = this.getChar(i);
        }

        (* Append the new string *)
        int j = 0;
        for (; temp.getChar(j) != 0; j = j + 1) {
            temparray[i+j] = temp.getChar(j);
        }

        temparray[this.length() + temp.length() + 1] = '\000';
        class String newString = new String(temparray);
        return newString;
    }

   public bool compare(class String check) {

       if (check.length != this.length) {
            return false;
       }    
    
       int i = 0;
       
       for (; i < check.length(); i = i + 1) {

           if (check.getChar(i) != this.getChar(i)) {
                return false;
           }
       }

       return true;
    }
       
   public bool contains(class String check) {
        
   
        if (this.length < check.length) {
            return false;
        } else if (this.compare(check)) {
            return true;
        } else {
            
            int diff = this.length - check.length + 1;
            int i;
            int j;
            for ( i = 0; i < diff; i = i + 1)     
                
                for ( j = 0; j < check.length; j = j + 1) {

                    if (this.getChar(i+j) != check.getChar(j)) {
                        break;
                    } 
                    
                    if (j == check.length - 1) {
                        return true;
                    }
                }    
            }
    }

    public void free() {

        delete(this.my_string);
    }

}


class Two {
	public void main(char[][] args) {
        class String s = new String("hi");
        print(s.string());
	}
}
